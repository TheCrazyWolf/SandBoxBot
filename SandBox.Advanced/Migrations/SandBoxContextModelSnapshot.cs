// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SandBox.Advanced.Database;

#nullable disable

namespace SandBox.Advanced.Migrations
{
    [DbContext(typeof(SandBoxContext))]
    partial class SandBoxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("SandBox.Models.Captchas.Captcha", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("AttemptsRemain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeExpired")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IdTelegram")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdTelegram");

                    b.ToTable("Captchas");
                });

            modelBuilder.Entity("SandBox.Models.Common.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<long?>("IdTelegram")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("IdTelegram");

                    b.ToTable("Events");

                    b.HasDiscriminator().HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SandBox.Models.Members.Account", b =>
                {
                    b.Property<long>("IdTelegram")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsGlobalApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGlobalRestricted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsManagerThisBot")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("IdTelegram");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SandBox.Models.Members.ChatProps", b =>
                {
                    b.Property<long>("IdChat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoKickIfWillBeDetectedSpam")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<float>("PercentageToDetectSpamFromMl")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("IdChat");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SandBox.Models.Members.MemberChat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeJoined")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IdChat")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IdTelegram")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRestricted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdChat");

                    b.HasIndex("IdTelegram");

                    b.ToTable("MembersInChats");
                });

            modelBuilder.Entity("SandBox.Models.Members.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Quest")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SandBox.Models.Events.EventContent", b =>
                {
                    b.HasBaseType("SandBox.Models.Common.Event");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRestored")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSpam")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("EventContent");
                });

            modelBuilder.Entity("SandBox.Models.Events.EventJoined", b =>
                {
                    b.HasBaseType("SandBox.Models.Common.Event");

                    b.HasDiscriminator().HasValue("EventJoined");
                });

            modelBuilder.Entity("SandBox.Models.Captchas.Captcha", b =>
                {
                    b.HasOne("SandBox.Models.Members.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdTelegram");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SandBox.Models.Common.Event", b =>
                {
                    b.HasOne("SandBox.Models.Members.ChatProps", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId");

                    b.HasOne("SandBox.Models.Members.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdTelegram");

                    b.Navigation("Account");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("SandBox.Models.Members.MemberChat", b =>
                {
                    b.HasOne("SandBox.Models.Members.ChatProps", "Chat")
                        .WithMany()
                        .HasForeignKey("IdChat");

                    b.HasOne("SandBox.Models.Members.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdTelegram");

                    b.Navigation("Account");

                    b.Navigation("Chat");
                });
#pragma warning restore 612, 618
        }
    }
}
